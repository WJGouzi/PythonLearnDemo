面向对象的中高级

class Foo:
    def __init__(self, name):
        # 普通字段
        self.name = name

    # 普通方法
    def bar(self):
        pass

obj = Foo('wj')
obj.name
obj.bar()


类成员:
    字段
        普通字段-> 保存在对象里(只能通过对象进行访问)
        静态字段-> 保存在类里

    方法
        普通方法-> 保存在类中，需要传入self(当前的对象)
        静态方法-> 保存在类中，需要@staticmethod进行修饰，由类直接调用，且不需要self参数
        类方法->   保存在类中，需要@classmethod进行修饰，由类直接调用，且需要除开self以外的参数，传入cls(当前的类)

#####  应用场景  #####
    如果在对象中保存中一些值，执行某些功能时，需要对象中的一些值 -> 普通方法
    不需要任何对象中的值 ->用静态方法


class Province:

    # 静态字段
    country = '中国'

    def __init__(self, name):
        # 普通字段
        self.name = name

Province.country    #  可以直接访问
sichuan = Province('四川')
name = sichuan.name


成员属性
    第一种创建方式
        添加@property装饰器，这就相当于是一个getter方法
        添加@per.setter(下面的方法)，这就是相当于给per这个成员添加了一个setter方法
        添加@per.deleter装饰器，这就是相当于给per这个成员属性添加了一个del方法
        # 此外，这些成员属性在调用的时候不需要添加()
        # 在需要对这些成员属性进行修改的时候是和setter装饰器成对出现的
        # 进行删除操作的时候需要和deleter装饰器进行成对出现的
    第二种创建方式
        类似于getter方法
            def f1(self):
                return 123
            perr = property(fget=f1)  # 等同于上面加上@property装饰器的写法
        类似于setter方法
            def f2(self, value):
                print(value)
            perr1 = property(fset=f2)
        类似于deleter方法
            def f3(self):
                print('delete')
        这里最多就放四个参数，每个参数都对应的都是一个方法
            perr2 = property(fget=f1, fset=f2, fdel=f3, doc='这个是注释')