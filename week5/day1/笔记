面向对象的中高级

class Foo:
    def __init__(self, name):
        # 普通字段
        self.name = name

    # 普通方法
    def bar(self):
        pass

obj = Foo('wj')
obj.name
obj.bar()


类成员:
    字段
        普通字段-> 保存在对象里(只能通过对象进行访问)
        静态字段-> 保存在类里

    方法
        普通方法-> 保存在类中，需要传入self(当前的对象)
        静态方法-> 保存在类中，需要@staticmethod进行修饰，由类直接调用，且不需要self参数
        类方法->   保存在类中，需要@classmethod进行修饰，由类直接调用，且需要除开self以外的参数，传入cls(当前的类)

#####  应用场景  #####
    如果在对象中保存中一些值，执行某些功能时，需要对象中的一些值 -> 普通方法
    不需要任何对象中的值 ->用静态方法


class Province:

    # 静态字段
    country = '中国'

    def __init__(self, name):
        # 普通字段
        self.name = name

Province.country    #  可以直接访问
sichuan = Province('四川')
name = sichuan.name
