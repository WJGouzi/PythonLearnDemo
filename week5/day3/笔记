1.异常处理

    try:
        代码的逻辑
        ip = input('用户输入:')
        i = int(ip)
    except Exception as e:
        上述代码块出错后，自动执行当前的代码块的内容
        i = 1

===================================================

    try:
        # li = [1, 4.5, 6]
        # li[222]
        ip = input('请输入内容:')
        i = int(ip)
    except IndexError as e:                     # IndexError是Exception的子类
        print(e)
    except ValueError as e:
        print(e)
    except Exception as e:                      # 对某一种错误细分的时候，需要将细分的网上提，所有的错误的放在最下面
        print(e)
    else:
        print('没有错')                          # 对于没有出错的时候将会执行
    finally:
        print('不管出错与否都是要执行的')           # 不管出错与否都是要执行的

===================================================
    主动触发异常
    try:
        # 主动触发异常
        raise Exception('主动抛出的异常')
    except Exception as e:
        print(e)

    自定义的错误类型
    class Myerror(Exception):

        def __init__(self, msg):
            self.msg = msg

        def __str__(self):
            return self.msg

    error = Myerror('自定义的错误类型')
    print(error)

    try:
        raise Myerror('触发自定义的错误类型')
    except Myerror as e:
        print(e)                                # 触发了__str__方法

===================================================
    断言
        assert 条件 -> 如果满足就执行下面的代码，如果不满足就直接报错(一般不放在try中)
                   -> 强制用户服从这个条件，可捕获错误，但是一般不捕获这个错误

2.反射

3.单例模式
